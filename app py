# app.py

import streamlit as st
import pandas as pd
from tacf_functions import (
    DADOS_INDICES, 
    TRADUCAO_CAMPOS, 
    DADOS_COMPLETOS_ANEXO_VII, 
    calcular_resultado
)

# --- Interface Streamlit ---

st.set_page_config(
    page_title="Calculadora TACF COMAER (NSCA 54-4)",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("Avaliação do Teste de Condicionamento Físico (TACF) COMAER")
st.subheader("Baseado nos Índices Mínimos da NSCA 54-4/2024 (Exames de Admissão)")
st.markdown("---")

# --- Lógica do Menu ---

st.sidebar.header("1. Seleção da Opção")
opcoes_base = ["TACF GERAL (Tabelas de Índices)", "Calcular TACF Anual (Simplificado)"]
opcao_selecionada = st.sidebar.radio("Escolha a funcionalidade:", opcoes_base)

st.sidebar.markdown("---")

if opcao_selecionada == "TACF GERAL (Tabelas de Índices)":
    
    st.header("TACF GERAL: Tabela de Índices Mínimos por Exame")
    st.markdown("Abaixo estão todos os índices mínimos de aprovação exigidos para os diferentes exames, cursos e estágios, conforme o Anexo VII da NSCA 54-4/2024.")

    df_geral_m = []
    df_geral_f = []
    
    for nome_exame, indices in DADOS_COMPLETOS_ANEXO_VII.items():
        if "(M)" in nome_exame:
            df_geral_m.append({
                "Exame/Estágio": nome_exame.replace(" (M)", ""),
                TRADUCAO_CAMPOS["FEMS"]: indices["FEMS"] if indices["FEMS"] is not None else "-",
                TRADUCAO_CAMPOS["FTSC"]: indices["FTSC"] if indices["FTSC"] is not None else "-",
                TRADUCAO_CAMPOS["SH"]: indices["SH"] if indices["SH"] is not None else "-",
                TRADUCAO_CAMPOS["Corrida 12 min"]: indices["Corrida 12 min"] if indices["Corrida 12 min"] is not None else "-",
                TRADUCAO_CAMPOS["C. Cintura"]: f"≤ {indices['C. Cintura']} cm" if indices["C. Cintura"] is not None else "-",
            })
        elif "(F)" in nome_exame:
            df_geral_f.append({
                "Exame/Estágio": nome_exame.replace(" (F)", ""),
                TRADUCAO_CAMPOS["FEMS"]: indices["FEMS"] if indices["FEMS"] is not None else "-",
                TRADUCAO_CAMPOS["FTSC"]: indices["FTSC"] if indices["FTSC"] is not None else "-",
                TRADUCAO_CAMPOS["SH"]: indices["SH"] if indices["SH"] is not None else "-",
                TRADUCAO_CAMPOS["Corrida 12 min"]: indices["Corrida 12 min"] if indices["Corrida 12 min"] is not None else "-",
                TRADUCAO_CAMPOS["C. Cintura"]: f"≤ {indices['C. Cintura']} cm" if indices["C. Cintura"] is not None else "-",
            })

    st.subheader("Índices Mínimos - Sexo MASCULINO")
    st.dataframe(pd.DataFrame(df_geral_m), hide_index=True, use_container_width=True)

    st.subheader("Índices Mínimos - Sexo FEMININO")
    st.dataframe(pd.DataFrame(df_geral_f), hide_index=True, use_container_width=True)

    st.caption("FEMS (Flexão e Extensão de Membros Superiores), FTSC (Flexão do Tronco Sobre as Coxas), SH (Salto Horizontal), C. Cintura (Circunferência da Cintura).")
    
else:
    # --- CALCULAR DESEMPENHO TACF ANUAL SIMPLIFICADO ---
    
    st.header("Calcular Desempenho no TACF Anual (Simplificado)")
    st.warning("⚠️ **AVISO: Base Normativa e Idade:** Esta ferramenta utiliza a **NSCA 54-4 (Exames de Admissão)**. Os índices mínimos **NÃO variam por Idade**. A Pontuação Máxima/Geral e a Nota Final são **Simulações** para fins didáticos.")
    
    st.sidebar.header("2. Padrão e Idade")
    opcoes_exame = sorted(list(DADOS_INDICES.keys()))
    tipo_exame = st.sidebar.selectbox(
        "Selecione o Sexo/Padrão de Cálculo:",
        opcoes_exame,
        index=0 # Default para Masculino
    )
    
    # Campo Idade (apenas para referência, não afeta o cálculo APTO/NÃO APTO)
    idade_candidato = st.sidebar.number_input(
        "Idade do Candidato (Apenas para Referência)",
        min_value=16,
        value=25,
        step=1,
        help="A idade não altera os índices desta avaliação (NSCA 54-4)."
    )
    
    st.sidebar.markdown("---")
    st.sidebar.header("3. Insira os Resultados")

    indices_necessarios = DADOS_INDICES[tipo_exame]

    resultados = {"Idade": idade_candidato}

    # Campos de entrada de dados
    for teste_curto, min_valor in indices_necessarios.items():
        if min_valor is not None:
            label = TRADUCAO_CAMPOS[teste_curto]
            
            # Define o valor inicial para o input
            if teste_curto == "C. Cintura":
                initial_value = min_valor - 1.0 
                step_val = 0.1
                input_format = "%.1f"
                help_text = f"Máximo permitido: {min_valor} cm."
            elif teste_curto == "Corrida 12 min":
                initial_value = int(min_valor)
                step_val = 10
                input_format = "%d"
                help_text = f"Mínimo exigido: {min_valor} m."
            else:
                initial_value = int(min_valor)
                step_val = 1
                input_format = "%d"
                help_text = f"Mínimo exigido: {min_valor} repetições."

            # Repetições, Distância ou Circunferência
            if teste_curto == "C. Cintura":
                resultados[teste_curto] = st.sidebar.number_input(
                    label,
                    min_value=0.0,
                    value=initial_value,
                    step=step_val,
                    format=input_format,
                    help=help_text
                )
            else:
                resultados[teste_curto] = st.sidebar.number_input(
                    label,
                    min_value=0,
                    value=initial_value,
                    step=step_val,
                    format=input_format,
                    help=help_text
                )
        
    st.sidebar.markdown("---")
    
    if st.sidebar.button("Calcular Resultado do TACF"):
        # Execução do cálculo
        resultado_final, nota_geral, pontuacao_geral_final, resultados_avaliacao, indices_referencia, resultados_candidato = calcular_resultado(tipo_exame, resultados)
        
        st.header("Resultado da Avaliação")
        
        # --- TABELA RESUMO GERAL ---
        st.subheader("Resumo da Situação Geral")
        
        # Cria a tabela de resumo
        df_resumo = pd.DataFrame({
            "Critério": ["STATUS GERAL (Eliminatório)", "NOTA GERAL (Simulada)"],
            "Resultado": [resultado_final, nota_geral],
            "Valor": ["-", f"{pontuacao_geral_final:.1f} Pts / 100 Pts"]
        })
        
        # Define a cor para a Situação Final
        def color_situacao(val):
            # Val é o texto da célula (Resultado: APTO GERAL ou NÃO APTO GERAL)
            if "APTO GERAL" in val:
                return 'background-color: #d4edda; color: black'
            elif "NÃO APTO GERAL" in val:
                return 'background-color: #f8d7da; color: black'
            return ''
        
        # Aplicar o estilo SOMENTE à célula na linha de índice 0 (STATUS GERAL) e coluna 'Resultado'
        st.dataframe(
            df_resumo.style.applymap(
                color_situacao,
                # Usa uma tupla (linhas, colunas) para o subset
                subset=([0], ['Resultado']) 
            ),
            hide_index=True,
            use_container_width=True
        )

        st.markdown("---")
        
        # --- TABELA DE DESEMPENHO DETALHADO ---
        st.subheader("Desempenho Detalhado por Teste")
        
        # Prepara a lista de resultados e índices para exibição
        display_data = []
        for k in ["FEMS", "FTSC", "Corrida 12 min", "C. Cintura"]:
            if k in resultados_avaliacao:
                
                # Valores de Referência
                min_aprovacao = indices_referencia[k]["Mínimo"]
                max_simulado = indices_referencia[k]["Máximo"]
                pontuacao_cand = indices_referencia[k]["Pontuação Candidato"]
                valor_candidato = resultados_candidato.get(k)
                avaliacao = resultados_avaliacao[k]
                
                # Unidade
                if k == "C. Cintura":
                    unidade = "cm"
                    min_texto = f"Máx: {min_aprovacao} {unidade}"
                    max_texto = f"Mín: {max_simulado} {unidade}"
                else:
                    unidade = "repetições" if k in ["FEMS", "FTSC"] else "m"
                    min_texto = f"Mín: {min_aprovacao} {unidade}"
                    max_texto = f"Máx: {max_simulado} {unidade}"
                
                
                display_data.append({
                    "Teste": TRADUCAO_CAMPOS[k],
                    "Pontuação do Candidato (Pts)": f"{pontuacao_cand:.1f}",
                    "Pontuação Mínima (Aprovação)": min_texto,
                    "Pontuação Máxima (Simulada)": max_texto,
                    "Resultado do Candidato": f"{valor_candidato} {unidade}",
                    "Situação": avaliacao
                })

        df_resultados = pd.DataFrame(display_data)
        
        # Cor da célula na tabela
        def color_status_detalhe(val):
            color = 'background-color: #d4edda; color: black' if val == 'APTO' else 'background-color: #f8d7da; color: black'
            return color
        
        st.dataframe(
            df_resultados.style.applymap(
                color_status_detalhe, 
                subset=['Situação']
            ),
            hide_index=True,
            use_container_width=True
        )

st.markdown("---")
st.caption("""
    **NOTA SOBRE PONTUAÇÃO E IDADE:** A **NSCA 54-4** (base desta calculadora) apenas define o índice mínimo ("APTO"). 
    A **Pontuação GERAL, Pontuação Máxima e os conceitos de nota (REGULAR, BOM, EXCELENTE)** são **SIMULAÇÕES DIDÁTICAS** implementadas para atender sua necessidade de um sistema de notas, **NÃO sendo valores ou critérios oficiais do COMAER** (que utiliza a **NSCA 54-3** e considera a idade para pontuação).
""")
